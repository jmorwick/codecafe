<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="gaussianPdf" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="gaussianPdf"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(double,double,double)double"/>
        <constructor-arg name="description">
            <bean id="outside-map" class="net.sourcedestination.codecafe.structure.exercises.ExerciseDefinition" factory-method="loadTextFile">
                <constructor-arg value="exercise-descriptions/gaussianPDFMethod.html"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1.0,2.0,3.0</value></constructor-arg>
                    <constructor-arg><value>0.120985</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>3,2,4</value></constructor-arg>
                    <constructor-arg><value>0.1760326</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>3,6,1</value></constructor-arg>
                    <constructor-arg><value>0.06289720</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>9,6,4</value></constructor-arg>
                    <constructor-arg><value>0.04698531</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1,2,5</value></constructor-arg>
                    <constructor-arg><value>0.0269954832</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="imports"><list></list></constructor-arg>
        <constructor-arg name="staticImports"><list>
            <value>java.lang.Math.*</value>
        </list></constructor-arg>
    </bean>

    <bean id="addTwoNumbers" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="addTwoNumbers"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int)int"/>
        <constructor-arg name="description">
           <value>Write a method with two integer parameters that simply returns their sum (as an integer). </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1,1</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1,-1</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>41,90</value></constructor-arg>
                    <constructor-arg><value>131</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0,432</value></constructor-arg>
                    <constructor-arg><value>432</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>-5,-9</value></constructor-arg>
                    <constructor-arg><value>-14</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0,0</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>51,-51</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>124,-200</value></constructor-arg>
                    <constructor-arg><value>-76</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="firstName" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="firstName"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String)String"/>
        <constructor-arg name="description">
            <value>Given a string containing a full name (first name, then a space, then the last name), return only the first name. </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Joseph Kendall-Morwick"</value></constructor-arg>
                    <constructor-arg><value>"Joseph"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Ryne Sandberg"</value></constructor-arg>
                    <constructor-arg><value>"Ryne"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Ada Lovelace"</value></constructor-arg>
                    <constructor-arg><value>"Ada"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Carol Danvers"</value></constructor-arg>
                    <constructor-arg><value>"Carol"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Tony Stark"</value></constructor-arg>
                    <constructor-arg><value>"Tony"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="bothEnds" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="bothEnds"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String)String"/>
        <constructor-arg name="description">
            <value>Given a string containing at least two characters, return a new string consisting of the first and
            last characers in the original string (in that order). </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Java"</value></constructor-arg>
                    <constructor-arg><value>"Ja"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Missouri Western"</value></constructor-arg>
                    <constructor-arg><value>"Mn"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Hi"</value></constructor-arg>
                    <constructor-arg><value>"Hi"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Carol Danvers"</value></constructor-arg>
                    <constructor-arg><value>"Cs"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Tony Stark"</value></constructor-arg>
                    <constructor-arg><value>"Tk"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"aba"</value></constructor-arg>
                    <constructor-arg><value>"aa"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="initials" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="initials"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String)String"/>
        <constructor-arg name="description">
            <value>Given a string containing a three-part full name where each part of the name is separated by spaces,
                return a new string consisting of the initials for that person's name, all in upper-case, with a period
                following each initial. </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Philip Seymour Hoffman"</value></constructor-arg>
                    <constructor-arg><value>"P.S.H."</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Jaime Lee Curtis"</value></constructor-arg>
                    <constructor-arg><value>"J.L.C."</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Daniel dae Kim"</value></constructor-arg>
                    <constructor-arg><value>"D.D.K."</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Dark Wing Duck"</value></constructor-arg>
                    <constructor-arg><value>"D.W.D."</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Tommy Lee Jones"</value></constructor-arg>
                    <constructor-arg><value>"T.L.J."</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"a b c"</value></constructor-arg>
                    <constructor-arg><value>"A.B.C."</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="getRenter" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p208150 /-->
        <constructor-arg name="methodName" value="getRenter"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String,String[],String[])String"/>
        <constructor-arg name="description">
            <value>Given a book title, an array of book titles, and an array of the names of renters of the books in the
                previous arrays (array indices should match up), return the name of the renter of the given book. If the
                book title is not recognized or if no one is renting the book, return null. Ignore case when comparing
                book titles. If no one is renting the book the renters array should contain the value null for the given
                book.</value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Snow Crash", new String[]{"Snow Crash", "I Robot", "Neuromancer", "The Hitchhiker's Guide to the Galaxy"}, new String[]{"Joey", null, "Jenny", "Jerry"}</value></constructor-arg>
                    <constructor-arg><value>"Joey"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Snow Crash", new String[]{"Reamde", "I Robot", "Neuromancer", "The Hitchhiker's Guide to the Galaxy"}, new String[]{"Joey", null, "Jenny", "Jerry"}</value></constructor-arg>
                    <constructor-arg><value>null</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"the hitchhiker's guide to the galaxy", new String[]{"Snow Crash", "I Robot", "Neuromancer", "The Hitchhiker's Guide to the Galaxy"}, new String[]{"Joey", null, "Jenny", "Jerry"}</value></constructor-arg>
                    <constructor-arg><value>"Jerry"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"C",new String[]{"a","b","c"}, new String[]{"1","2","3"}</value></constructor-arg>
                    <constructor-arg><value>"3"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="isLeapYear" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p243129 /-->
        <constructor-arg name="methodName" value="isLeapYear"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int)boolean"/>
        <constructor-arg name="description">
            <value>This method should return true if the given year is a leap year and false otherwise. Only positive
                values will be used for years. Most years that are divisible by 4 are leap years, but there are
                exceptions. Years that are divisible by 100 are not leap years, unless they are also divisible by 400,
                in which case they are still a leap year! If we had a leap year every 4 years, it would over correct
                and our calendars would fall out of sync. To correct for this, years divisible by 100 are not counted
                as leap years (for instance, 1900 was not a leap year). However, this over corrects too much in the
                other direction! To avoid over correcting, we still count years divisible by 400 as leap years (for
                instance, 2000 was a leap year!)</value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1998</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2001</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2004</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2100</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2000</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1900</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2123</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2020</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2200</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2400</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="examScore" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p244189 /-->
        <constructor-arg name="methodName" value="examScore"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int,int)int"/>
        <constructor-arg name="description">
            <value>In our section of CSC 184, there are some slightly complicated rules for how your weighted exam score
                is determined. Check the syllabus for an explanation of these rules. Given scores on each of the three
                exams (midterm, finalWritten, and finalPractical), determine what the overall exam score should be and
                return it. Round values to the nearest point and return the score as an integer. Hint: Find the minimum
                score and also find the weighted average of all the exam scores. This should be enough to calculate the
                return value. Also, the Math.round method can make it a little easier to round to the nearest integer
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>54, 82, 64</value></constructor-arg>
                    <constructor-arg><value>69</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>74, 98, 87</value></constructor-arg>
                    <constructor-arg><value>89</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>100, 0, 0</value></constructor-arg>
                    <constructor-arg><value>40</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0, 0, 100</value></constructor-arg>
                    <constructor-arg><value>40</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0, 100, 0</value></constructor-arg>
                    <constructor-arg><value>40</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>100, 100, 100</value></constructor-arg>
                    <constructor-arg><value>100</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>12,13,14</value></constructor-arg>
                    <constructor-arg><value>13</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0, 100, 50</value></constructor-arg>
                    <constructor-arg><value>60</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>100,90,92</value></constructor-arg>
                    <constructor-arg><value>95</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>90,100,98</value></constructor-arg>
                    <constructor-arg><value>97</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>100,100,90</value></constructor-arg>
                    <constructor-arg><value>98</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>99,99,100</value></constructor-arg>
                    <constructor-arg><value>99</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>0, 0, 21</value></constructor-arg>
                    <constructor-arg><value>8</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="highestBidder" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p292218 /-->
        <constructor-arg name="methodName" value="highestBidder"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int,int)int"/>
        <constructor-arg name="description">
            <value>Three auction goers are bidding on a painting. Their bids are represented by bid1, bid2, and bid3
                below. The highest bidder gets the painting! Return the value 1, 2, or 3 corresponding with the highest
                bidder. In the case of a tie, return the smallest number from the tied bidders. Note that you can have
                more than one if statement and more than one return statement in your program. Also note that your last
                return statement should not be inside an if statement (with some exceptions that we'll see next week).
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>234, 325, 14</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>124, 15, 52</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>5000, 6000, 7000</value></constructor-arg>
                    <constructor-arg><value>3</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>954, 954, 1500</value></constructor-arg>
                    <constructor-arg><value>3</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>900, 4210, 4210</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1,1,1</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>20,20,0</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1,2,3</value></constructor-arg>
                    <constructor-arg><value>3</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="bowlingRollScore" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p246309 /-->
        <constructor-arg name="methodName" value="bowlingRollScore"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(char)int"/>
        <constructor-arg name="description">
            <value>Write  method for interpreting a single roll in a bowling score. This method returns an integer
                (the score of the roll) and has one character parameter called roll indicating what happened on that
                roll of the bowling ball.  A bowling score can be any of the digits 0 - 9, indicating the number of
                pins knocked down, or a / (called a spare) or a X (called a strike), indicating all 10 pins were
                knocked down. For those familiar with bowling, this method will ignore future and past rolls that may
                impact the score of a spare or a strike. In each case, this method should simply return the score as
                the number of pins knocked down. For an unrecognized character, the method should return 0.
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'X'</value></constructor-arg>
                    <constructor-arg><value>10</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'/'</value></constructor-arg>
                    <constructor-arg><value>10</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'1'</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'2'</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'3'</value></constructor-arg>
                    <constructor-arg><value>3</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'!'</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'4'</value></constructor-arg>
                    <constructor-arg><value>4</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'5'</value></constructor-arg>
                    <constructor-arg><value>5</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'6'</value></constructor-arg>
                    <constructor-arg><value>6</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'7'</value></constructor-arg>
                    <constructor-arg><value>7</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'8'</value></constructor-arg>
                    <constructor-arg><value>8</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>'9'</value></constructor-arg>
                    <constructor-arg><value>9</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="priceIsRight" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/prob/p272214 /-->
        <constructor-arg name="methodName" value="priceIsRight"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int,int)int"/>
        <constructor-arg name="description">
            <value>On the show "The Price is Right", contestants bid on the price of an item up for bid. The winner is
                the contestant who has the highest bid without going over the actual retail price of the item up for bid.
                If there are only two contestants bidding and their bids are represented by bid1 and bid2 and the actual
                retail price of the item up for bid is represented by actualRetailPrice, determine whether contestant 1
                or contestant2 wins the bid by returning 1 when contestant 1 wins and 2 when contestant 2 wins.

                Note that the contestants are not allowed to enter the same bid. If they do, return 0 to indicate there
                is no winner. Likewise, if both contestants bid over the actual retail price of the item up for bid,
                there will also be no winner (return the value 0 in this case).
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>15, 16, 20</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>80, 40, 85</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>199, 200, 510</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1, 2, 40</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>900, 1, 850</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>999, 1, 1000</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>500, 501, 500</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>35, 75, 65</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>35, 75, 95</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>100, 100, 900</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>500, 501, 299</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>501, 500, 299</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>12, 42, 15</value></constructor-arg>
                    <constructor-arg><value>1</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="palindrome" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="palindrome"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String)boolean"/>
        <constructor-arg name="description">
            <value>A palindrome is any word or series of words that can be spelled the same way backward and forward.
                Spaces are commonly ignored when considering whether a sentence is a palindrome or not.

                Write a method that takes a string and returns true if it represents a palindrome, and false otherwise.
                Don't try to solve the whole problem all at once. First get the method working on the first four test
                cases, then try for the last two!
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"racecar"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"racecars"</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"tacocat"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"fool"</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"taco cat"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"a man a plan a canal panama"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"hi there"</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"radar"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"dood"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"a"</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>""</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"ab"</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="countEvens" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="countEvens"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int)int"/>
        <constructor-arg name="description">
            <value>Write a method that adds up all of the even numbers from 1 to limit and returns it.</value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1</value></constructor-arg>
                    <constructor-arg><value>0</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>2</value></constructor-arg>
                    <constructor-arg><value>2</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>4</value></constructor-arg>
                    <constructor-arg><value>6</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>5</value></constructor-arg>
                    <constructor-arg><value>6</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>10</value></constructor-arg>
                    <constructor-arg><value>30</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>1000</value></constructor-arg>
                    <constructor-arg><value>250500</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="isPrime" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/author/p286501 /-->
        <constructor-arg name="methodName" value="isPrime"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int)boolean"/>
        <constructor-arg name="description">
            <value>Determine if the number is prime (an integer greater than 1 that is not divisible by any positive
                integer other than 1 and itself).</value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>3</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>4</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>5</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>10</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>13</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>7793</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>7794</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>7795</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="calmDown" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <!-- developed from https://codingbat.com/author/p203598 /-->
        <constructor-arg name="methodName" value="calmDown"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(String)String"/>
        <constructor-arg name="description">
            <value>Develops a method that takes a string and returns a copy of it without any exclamation points.
            </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"NO!!! YOU'RE THE JERK!!!"</value></constructor-arg>
                    <constructor-arg><value>"NO YOU'RE THE JERK"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Please be home by 10."</value></constructor-arg>
                    <constructor-arg><value>"Please be home by 10."</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"One! Two! Three! Four!"</value></constructor-arg>
                    <constructor-arg><value>"One Two Three Four"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Get home now!"</value></constructor-arg>
                    <constructor-arg><value>"Get home now"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Are you there? Are you there?! Hello?"</value></constructor-arg>
                    <constructor-arg><value>"Are you there? Are you there? Hello?"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"!!!"</value></constructor-arg>
                    <constructor-arg><value>""</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"Yo:/? hi"</value></constructor-arg>
                    <constructor-arg><value>"Yo:/? hi"</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>"!!1!!!1"</value></constructor-arg>
                    <constructor-arg><value>"11"</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="ultimateQuestion" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="ultimateQuestion"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int)boolean"/>
        <constructor-arg name="description">
            <value>Develop a method that takes two integers and returns true if one of them is 42 or their sum
            is 42.</value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>42,0</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>10,42</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>45,12</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>21,21</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>42,0</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>40,2</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>20,21</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="exactChange" class="net.sourcedestination.codecafe.structure.exercises.SimpleMethodExercise"
          factory-method="build">
        <constructor-arg name="methodName" value="exactChange"/>
        <constructor-arg name="timeout" value="1000"/>
        <constructor-arg name="signature" value="(int,int,int,int,int)boolean"/>
        <constructor-arg name="description">
            <value>You hear the icecream truck driving down the street and you race to grab as much change from the
            couch as you can and run out the door. When you get to the truck, you find out the driver is some
            kind of weird jerk that demands exact change for service.

            Write a method called exactChange that takes 4 integer values: priceOfIcecream (in cents), quarters, dimes,
            nickels, and pennies. The first integer represents the price demanded by the weirdo truck driver, and the others
            indicate how many of each type of coin you managed to scrounge up. Return true if you'll be able to purchase
            the icecream with exact change and false otherwise. </value>
        </constructor-arg>
        <constructor-arg name="visibleTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>157,15,10,10,10</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>157,15,10,10,1</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>5,0,0,1,0</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg name="hiddenTests">
            <list>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>76,1,10,1,2</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>76,3,0,0,1</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>76,2,0,4,1</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>71,20,0,0,20</value></constructor-arg>
                    <constructor-arg><value>false</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>71,20,1,0,20</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>76,2,0,5,1</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
                <bean class="net.sourcedestination.funcles.tuple.Pair">
                    <constructor-arg><value>76,0,8,5,3</value></constructor-arg>
                    <constructor-arg><value>true</value></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean>


    <!-- incorporate https://codingbat.com/prob/p258263 /-->
    <!-- incorporate https://codingbat.com/prob/p257654 /-->

    <!-- replace https://codingbat.com/prob/p184004 /-->
    <!-- replace https://codingbat.com/prob/p182873 /-->
    <!-- replace https://codingbat.com/prob/p113261 /-->
    <!-- replace https://codingbat.com/prob/p170829 /-->
    <!-- replace https://codingbat.com/prob/p142455 /-->
    <!-- replace https://codingbat.com/prob/p155713 /-->
    <!-- replace https://codingbat.com/prob/p136254 /-->
    <!-- replace https://codingbat.com/prob/p191878 /-->

    <!-- develop exercises for templates /-->

</beans>
